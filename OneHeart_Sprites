import os, pygame, sys, numpy
from pygame.locals import *
questionArray = numpy.loadtxt('C:/Users/ccp/Documents/GitHub/One_heart_to_break/questionarray.txt',dtype=str, delimiter=';')
optionArray = numpy.loadtxt('C:/Users/ccp/Documents/GitHub/One_heart_to_break/optionarray.txt', dtype=str, delimiter=';')
resultsArray = numpy.loadtxt('C:/Users/ccp/Documents/GitHub/One_heart_to_break/resultarray.txt', dtype=str, delimiter=';')
continueArray = numpy.loadtxt('C:/Users/ccp/Documents/GitHub/One_heart_to_break/contarray.txt', dtype=bool, delimiter=';')
nextArray = numpy.loadtxt('C:/Users/ccp/Documents/GitHub/One_heart_to_break/nextarray.txt', dtype=int, delimiter=';')
current_question = "Error"
current_options = numpy.array(['Error','Error','Error','Error'])
current_results = numpy.array(['Error','Error','Error','Error'])

def question(conv):
    current_question = questionArray[conv]
    print ""
    print 'She says: ',  current_question

def options(n):
    current_options = optionArray[n]
    print ""
    print 'Choices: '
    for x in range(1,5):
        print x,': ', current_options[x-1]
    
def results(conv,choice):
    ##print 'You say: ',current_options[i]
    current_results = resultsArray[choice,conv]
    print ""
    print 'She says: ', current_results


def conversation(point):
    continue_conv=1
    start_point=point
    while continue_conv == 1:
        question (start_point)
        options(start_point)        
        i = raw_input('What will you say? ')
        i = int(i) - 1
        results(i,start_point)
        continue_conv = continueArray[start_point,i]
        start_point = nextArray[start_point]

#functions to create our resources
def load_image(name):
    fullname = os.path.join('C:/Users/ccp/Documents/GitHub/OH2B/Images/', name)
    ##try:
    image = pygame.image.load(fullname)
    ##except pygame.error, message:
        ##print 'Cannot load image:', fullname
       ## raise SystemExit, message
    return image, image.get_rect()

"""def load_sound(name):
    class NoneSound:
        def play(self): pass
    if not pygame.mixer or not pygame.mixer.get_init():
        return NoneSound()
    fullname = os.path.join('data', name)
    try:
        sound = pygame.mixer.Sound(fullname)
    except pygame.error, message:
        print 'Cannot load sound:', fullname
        raise SystemExit, message
    return sound"""


class drawQueue(pygame.sprite.RenderPlain):
    """This groupd of pictures currently needing drawn"""
    def __init__(self):
        pygame.sprite.Group.__init__(self) #call Sprite intializer

class picture(pygame.sprite.Sprite):
    """A class that holds a single image to draw."""
    def __init__(self,imageName):
        pygame.sprite.Sprite.__init__(self) #call Sprite intializer
        self.image, self.rect = load_image(imageName)
        self.isDrawn = False

class cursor(pygame.sprite.Sprite):
    def __init__(self,imageName):
        pygame.sprite.Sprite.__init__(self) #call Sprite intializer
        self.image, self.rect = load_image(imageName)
        self.isDrawn = True

    def update(self):
        pos = pygame.mouse.get_pos()
        print self.rect.midtop
        self.rect.midtop = pos


def main():
    """this function is called when the program starts.
       it initializes everything it needs, then runs in
       a loop until the function returns."""
#Initialize Everything
    print 'Stuff is happening!'
    pygame.init()
    SCREEN_WIDTH, SCREEN_HEIGHT = 1024, 768
    BG_COLOR = (0, 0, 0)
    screen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
    pygame.mouse.set_visible(0)

#Create The Backgound
    background = pygame.Surface(screen.get_size())
    print background.get_rect()
    background.fill(BG_COLOR)


#Put Text On The Background, Centered
    """if pygame.font:
        font = pygame.font.Font(None, 36)
        text = font.render("Pummel The Chimp, And Win $$$", 1, (10, 10, 10))
        textpos = text.get_rect(centerx=background.get_width()/2)
        background.blit(text, textpos)"""

#Display The Background
    screen.blit(background, (0, 0))
    pygame.display.flip()

#Prepare Game Objects
    clock = pygame.time.Clock()
    Menu = picture('Menu.png')
    Start = picture('Start.png')
    Exit = picture('Exit.png')
    Map = picture('Map.png')
    Ui = picture('Ui.png')
    cursorTalk = cursor('cursorTalk.png')
    Hresso = picture('Hresso.png')
    Kaffibarinn = picture('Kaffibarinn.png')
    Hallgrimskirkja = picture('Hallgrimskirkja.png')
    Eymundsson = picture('Eymundsson.png')
    Hospital = picture('Hospital.png')
    Prikid = picture('Prikid.png')
    
    queue = drawQueue()
    cursorQueue = pygame.sprite.LayeredUpdates()
    cursorTalk.add(cursorQueue)
    Menu.add(queue)
    Start.add(queue)
    Exit.add(queue)
    Menu.rect.midtop = (SCREEN_WIDTH/2,0)
    Start.rect.midtop = (SCREEN_WIDTH/3,500)
    Exit.rect.midtop = ((SCREEN_WIDTH/3)*2,500)
    gameState = 1
    x, y = (0, 0)

#Main Loop
    while 1:
        clock.tick(60)
        
    #Handle Input Events
        for event in pygame.event.get():
            if event.type == QUIT:
                return
            elif (event.type == pygame.KEYDOWN) and (event.key == pygame.K_RETURN):
                return
            elif event.type == MOUSEBUTTONDOWN:
                if Start.rect.colliderect(cursorTalk.rect):
                    Menu.remove(queue)
                    Start.remove(queue)
                    Exit.remove(queue)
                    Map.add(queue)
                    Ui.add(queue)
                elif Exit.rect.colliderect(cursorTalk.rect):
                    return              
            elif event.type is MOUSEBUTTONUP:
                x, y = None, None


      

    #Draw Everything
        cursorTalk.update()
        screen.blit(background, (0, 0))
        queue.draw(screen)
        cursorQueue.move_to_front(cursorTalk)
        cursorQueue.draw(screen)
        pygame.display.flip()

main()